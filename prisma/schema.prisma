// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Card {
  id                String    @id
  name              String
  lang              String    @default("en")
  released_at       DateTime?
  mana_cost         String?
  cmc               Float?
  type_line         String?
  oracle_text       String?
  power             String?
  toughness         String?
  colors            String[]
  color_identity    String[]
  set               String
  set_name          String
  rarity            String
  flavor_text       String?
  artist            String?
  image_uri_normal  String?
  image_uri_small   String?
  price_usd         Float?
  price_usd_foil    Float?
  legalities        Json?
  collections       CollectionCard[]
  decks             DeckCard[]
}

model User {
  id                String    @id @default(uuid())
  username          String    @unique
  email             String    @unique
  password          String    // This will store the hashed password, not plaintext
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  collections       Collection[]
  decks             Deck[]
}

model Collection {
  id                String    @id @default(uuid())
  name              String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  user              User      @relation(fields: [userId], references: [id])
  userId            String
  cards             CollectionCard[]
}

model CollectionCard {
  id                String    @id @default(uuid())
  quantity          Int       @default(1)
  
  // Relationships
  collection        Collection @relation(fields: [collectionId], references: [id])
  collectionId      String
  card              Card      @relation(fields: [cardId], references: [id])
  cardId            String

  @@unique([collectionId, cardId])
}

model Deck {
  id                String    @id @default(uuid())
  name              String
  description       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  user              User      @relation(fields: [userId], references: [id])
  userId            String
  cards             DeckCard[]
}

model DeckCard {
  id                String    @id @default(uuid())
  quantity          Int       @default(1)
  
  // Relationships
  deck              Deck      @relation(fields: [deckId], references: [id])
  deckId            String
  card              Card      @relation(fields: [cardId], references: [id])
  cardId            String

  @@unique([deckId, cardId])
}

